@page "/"
@inject IJSRuntime jsRuntime

<button @onclick="(()=>init(width,height,6))">restart</button>
<div class="game-container">
    <div class="mine-sweeper-container">
            @for (var tempI = 0; tempI < 8; tempI++)
            {
                <div class="mine-sweeper-row">
                    @for (var tempJ = 0; tempJ < 8; tempJ++)
                {
                    var i= tempI;
                    var j= tempJ;
                    <div class="mine-sweeper-item@(openStatus[(i) * width + j ])" @onclick="()=>handleLeftClick(i,j)"
                          @oncontextmenu="(e)=> handleRightClick(e,i,j)"
                    >
                    @if (markStatus[(i)*width+(j)] == 1)
                        {
                            <span class="iconfont" >&#xe778;</span>
                        }
                    @if(markStatus[(i)*width+(j)] == 2){
                            <span class="iconfont" >&#xe720;</span>
                    }
                        @if (openStatus[(i)*width+(j)]>0)
                        {
                            @if(mines[(i)*width+(j)]>0){
                                  <span
                            class="iconfont"
                        >&#xe63a;</span>
                            }
                            @if(neighbourMineCount()[(i)*width+(j)]>0){
                                <span class="1">
                                   @neighbourMineCount()[(i)*width+(j)] 
                                </span>
                            }
                        }
                        </div>
                    }
                </div>
            }
        </div>
            <div class="panel-container">
            <div class="panel-data-container">
                <span
                    class="iconfont"
                    style="font-size: 60px;"
                >&#xe778;</span>
                <div>
                    @selectedMineCount  / 6
                </div>
            </div>
            </div>
    </div>
@code{
    private bool isEnd;
    private int width = 8;
    private int height = 8;
    private int selectedMineCount = 0;
    int[] mines = new int[64] ;
    int[] openStatus = new int[64] ;
    int[] markStatus = new int[64] ;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        init(width, height, 6);
    }
    public void  shuffle (int[]mines,int  start) {
        for (var i = start; i < mines.Length; i++) {
            var randomIndex = new Random().Next(1,20);
            var tmp = mines[(int)randomIndex];
            mines[(int)randomIndex] = mines[i];
            mines[i] = tmp;
        }
    }
    public void init (int width,int height,int mineCount) {
        this.isEnd = false;
        var total = width * height;
        var mines = new int[64];
        for (int i = 0; i < mineCount; i++) {
            mines[i] = 1;
        }
        shuffle(mines, mineCount);
        this.mines = mines;
        Array.Fill(openStatus,0);
        Array.Fill(markStatus,0);
        this.selectedMineCount = 0;
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    public void positionJudge()
    {
        if (this.selectedMineCount == 6) {
            var match = false;
            int c = 0;
            for (int i = 0; i < 64; i++)
            {
                if (markStatus[i]==mines[i] && mines[i]==1)
                {
                    c++;
                }
            }
            if (c==6)
            {
                match = true;
            }
            if (match) {
                jsRuntime.InvokeAsync<string>("alert", "Win!");
                this.isEnd = true;
            }
        }
    }
    public void handleRightClick(EventArgs e,int x,int y )
    {
        if (this.isEnd) {
            return;
        }
        var index = x * this.width + y;
        if (this.openStatus[index] == 1) {
            return;
        }
        spliceMarkStatus(markStatus,index,(this.markStatus[index] + 1) % 3);
        if (this.markStatus[index] == 1) {
            this.selectedMineCount++;
        } else if (this.markStatus[index] == 2) {
            this.selectedMineCount--;
        }
        positionJudge();
    }
    private void spliceMarkStatus(int[] marksta,int index,int count)
    {
        marksta[index] = count;
    }
    public void handleLeftClick(int x,int y)
    {
        if (this.isEnd) {
            return;
        }
        var index = x * this.width + y;
        if (this.openStatus[index] == 1 || this.markStatus[index] == 1) {
            return;
        }
        if (this.mines[index]>0) {
            spliceoOpenStatus(openStatus,index);
           

            this.isEnd = true;
            //this.$nextTick(() => {
            //    alert('mine');
            //});
              jsRuntime.InvokeAsync<string>("alert", "碰雷了!");
            return;
        }
        if (this.neighbourMineCount()[index] > 0) {
            spliceoOpenStatus(openStatus,index);
            return;
        }
        this.floodfill(x, y);
    }
    public void spliceoOpenStatus(int[] openStatus,int index ){

        openStatus[index] = 1;
    }
   public void  floodfill (int x,int  y) {
            if (x < 0 || y < 0 || x == this.height || y == this.width) {
                return;
            }
            var index = x * this.width + y;
            if (this.openStatus[index] == 1) {
                return;
            }
            spliceoOpenStatus(openStatus,index);
            if (this.neighbourMineCount()[index] > 0) {
                return;
            }
            for (var  i = -1; i < 2; i++) {
                for (var j = -1; j < 2; j++) {
                    this.floodfill(x + i, y + j);
                }
            }
        }
      public int[]    neighbourMineCount () {
            var result = new int[this.width * this.height];
            for (int i = 0; i < result.Length; i++) {
                if (this.mines[i]==0) {
                    continue;
                }
                  int   y = i % this.width;
                  int x = (i - y) / this.width;
                for (int j = -1; j < 2; j++) {
                      int newX = x + j;
                    if (newX < 0 || newX == this.height) {
                        continue;
                    }
                    for (int k = -1; k < 2; k++) {
                          int newY = y + k;
                        if (newY < 0 || newY == this.width) {
                            continue;
                        }
                        result[newX * this.width + newY]++;
                    }
                }
            }
            return result;
        }
 }
<style >
.game-container {
    display: flex;
    justify-content: space-between;
    padding: 0 15px;
}
.mine-sweeper-container {
    overflow: hidden;
    width: fit-content;
    margin: 0 auto;
    background-color: #f2f1f0;
}
.mine-sweeper-row {
    display: flex;
}
.mine-sweeper-item0 {
    width: 50px;
    height: 50px;
    margin: 2px;
    line-height: 50px;
    font-size: 34px;
    text-align: center;
    background-color: #babdb6;
    cursor: pointer;
}

.iconfont{
    width: 50px;
    height: 50px;
    margin: 2px;
    line-height: 50px;
    font-size: 40px;
    text-align: center;
    background-color:orangered
}
.mine-sweeper-item1 {
      width: 50px;
    height: 50px;
    margin: 2px;
    line-height: 50px;
    font-size: 34px;
    text-align: center;
    background-color: #dededc;
}
.panel-container {
    width: 180px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}
.panel-data-container {
    padding-top: 15px;
    text-align: center;
}
</style>